/**
 * This file is part of the "libunicode" project
 *   Copyright (c) 2020 Christian Parpart <christian@parpart.family>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#pragma once

#include <array>
#include <optional>
#include <string>
#include <utility>

namespace unicode {

// {{{ General property enum classes
enum class Age {
    Unassigned = 0,
    V10_0 = 1,
    V11_0 = 2,
    V12_0 = 3,
    V12_1 = 4,
    V13_0 = 5,
    V1_1 = 6,
    V2_0 = 7,
    V2_1 = 8,
    V3_0 = 9,
    V3_1 = 10,
    V3_2 = 11,
    V4_0 = 12,
    V4_1 = 13,
    V5_0 = 14,
    V5_1 = 15,
    V5_2 = 16,
    V6_0 = 17,
    V6_1 = 18,
    V6_2 = 19,
    V6_3 = 20,
    V7_0 = 21,
    V8_0 = 22,
    V9_0 = 23,
};

enum class Bidi_Class {
    Arabic_Letter = 0,
    Arabic_Number = 1,
    Boundary_Neutral = 2,
    Common_Separator = 3,
    European_Number = 4,
    European_Separator = 5,
    European_Terminator = 6,
    First_Strong_Isolate = 7,
    Left_To_Right = 8,
    Left_To_Right_Embedding = 9,
    Left_To_Right_Isolate = 10,
    Left_To_Right_Override = 11,
    Nonspacing_Mark = 12,
    Other_Neutral = 13,
    Paragraph_Separator = 14,
    Pop_Directional_Format = 15,
    Pop_Directional_Isolate = 16,
    Right_To_Left = 17,
    Right_To_Left_Embedding = 18,
    Right_To_Left_Isolate = 19,
    Right_To_Left_Override = 20,
    Segment_Separator = 21,
    White_Space = 22,
};

enum class Bidi_Paired_Bracket_Type {
    Close = 0,
    None = 1,
    Open = 2,
};

enum class Block {
    Adlam = 0,
    Aegean_Numbers = 1,
    Ahom = 2,
    Alchemical_Symbols = 3,
    Alphabetic_Presentation_Forms = 4,
    Anatolian_Hieroglyphs = 5,
    Ancient_Greek_Musical_Notation = 6,
    Ancient_Greek_Numbers = 7,
    Ancient_Symbols = 8,
    Arabic = 9,
    Arabic_Extended_A = 10,
    Arabic_Mathematical_Alphabetic_Symbols = 11,
    Arabic_Presentation_Forms_A = 12,
    Arabic_Presentation_Forms_B = 13,
    Arabic_Supplement = 14,
    Armenian = 15,
    Arrows = 16,
    Avestan = 17,
    Balinese = 18,
    Bamum = 19,
    Bamum_Supplement = 20,
    Basic_Latin = 21,
    Bassa_Vah = 22,
    Batak = 23,
    Bengali = 24,
    Bhaiksuki = 25,
    Block_Elements = 26,
    Bopomofo = 27,
    Bopomofo_Extended = 28,
    Box_Drawing = 29,
    Brahmi = 30,
    Braille_Patterns = 31,
    Buginese = 32,
    Buhid = 33,
    Byzantine_Musical_Symbols = 34,
    CJK_Compatibility = 35,
    CJK_Compatibility_Forms = 36,
    CJK_Compatibility_Ideographs = 37,
    CJK_Compatibility_Ideographs_Supplement = 38,
    CJK_Radicals_Supplement = 39,
    CJK_Strokes = 40,
    CJK_Symbols_And_Punctuation = 41,
    CJK_Unified_Ideographs = 42,
    CJK_Unified_Ideographs_Extension_A = 43,
    CJK_Unified_Ideographs_Extension_B = 44,
    CJK_Unified_Ideographs_Extension_C = 45,
    CJK_Unified_Ideographs_Extension_D = 46,
    CJK_Unified_Ideographs_Extension_E = 47,
    CJK_Unified_Ideographs_Extension_F = 48,
    CJK_Unified_Ideographs_Extension_G = 49,
    Carian = 50,
    Caucasian_Albanian = 51,
    Chakma = 52,
    Cham = 53,
    Cherokee = 54,
    Cherokee_Supplement = 55,
    Chess_Symbols = 56,
    Chorasmian = 57,
    Combining_Diacritical_Marks = 58,
    Combining_Diacritical_Marks_Extended = 59,
    Combining_Diacritical_Marks_For_Symbols = 60,
    Combining_Diacritical_Marks_Supplement = 61,
    Combining_Half_Marks = 62,
    Common_Indic_Number_Forms = 63,
    Control_Pictures = 64,
    Coptic = 65,
    Coptic_Epact_Numbers = 66,
    Counting_Rod_Numerals = 67,
    Cuneiform = 68,
    Cuneiform_Numbers_And_Punctuation = 69,
    Currency_Symbols = 70,
    Cypriot_Syllabary = 71,
    Cyrillic = 72,
    Cyrillic_Extended_A = 73,
    Cyrillic_Extended_B = 74,
    Cyrillic_Extended_C = 75,
    Cyrillic_Supplement = 76,
    Deseret = 77,
    Devanagari = 78,
    Devanagari_Extended = 79,
    Dingbats = 80,
    Dives_Akuru = 81,
    Dogra = 82,
    Domino_Tiles = 83,
    Duployan = 84,
    Early_Dynastic_Cuneiform = 85,
    Egyptian_Hieroglyph_Format_Controls = 86,
    Egyptian_Hieroglyphs = 87,
    Elbasan = 88,
    Elymaic = 89,
    Emoticons = 90,
    Enclosed_Alphanumeric_Supplement = 91,
    Enclosed_Alphanumerics = 92,
    Enclosed_CJK_Letters_And_Months = 93,
    Enclosed_Ideographic_Supplement = 94,
    Ethiopic = 95,
    Ethiopic_Extended = 96,
    Ethiopic_Extended_A = 97,
    Ethiopic_Supplement = 98,
    General_Punctuation = 99,
    Geometric_Shapes = 100,
    Geometric_Shapes_Extended = 101,
    Georgian = 102,
    Georgian_Extended = 103,
    Georgian_Supplement = 104,
    Glagolitic = 105,
    Glagolitic_Supplement = 106,
    Gothic = 107,
    Grantha = 108,
    Greek_And_Coptic = 109,
    Greek_Extended = 110,
    Gujarati = 111,
    Gunjala_Gondi = 112,
    Gurmukhi = 113,
    Halfwidth_And_Fullwidth_Forms = 114,
    Hangul_Compatibility_Jamo = 115,
    Hangul_Jamo = 116,
    Hangul_Jamo_Extended_A = 117,
    Hangul_Jamo_Extended_B = 118,
    Hangul_Syllables = 119,
    Hanifi_Rohingya = 120,
    Hanunoo = 121,
    Hatran = 122,
    Hebrew = 123,
    High_Private_Use_Surrogates = 124,
    High_Surrogates = 125,
    Hiragana = 126,
    IPA_Extensions = 127,
    Ideographic_Description_Characters = 128,
    Ideographic_Symbols_And_Punctuation = 129,
    Imperial_Aramaic = 130,
    Indic_Siyaq_Numbers = 131,
    Inscriptional_Pahlavi = 132,
    Inscriptional_Parthian = 133,
    Javanese = 134,
    Kaithi = 135,
    Kana_Extended_A = 136,
    Kana_Supplement = 137,
    Kanbun = 138,
    Kangxi_Radicals = 139,
    Kannada = 140,
    Katakana = 141,
    Katakana_Phonetic_Extensions = 142,
    Kayah_Li = 143,
    Kharoshthi = 144,
    Khitan_Small_Script = 145,
    Khmer = 146,
    Khmer_Symbols = 147,
    Khojki = 148,
    Khudawadi = 149,
    Lao = 150,
    Latin_1_Supplement = 151,
    Latin_Extended_A = 152,
    Latin_Extended_Additional = 153,
    Latin_Extended_B = 154,
    Latin_Extended_C = 155,
    Latin_Extended_D = 156,
    Latin_Extended_E = 157,
    Lepcha = 158,
    Letterlike_Symbols = 159,
    Limbu = 160,
    Linear_A = 161,
    Linear_B_Ideograms = 162,
    Linear_B_Syllabary = 163,
    Lisu = 164,
    Lisu_Supplement = 165,
    Low_Surrogates = 166,
    Lycian = 167,
    Lydian = 168,
    Mahajani = 169,
    Mahjong_Tiles = 170,
    Makasar = 171,
    Malayalam = 172,
    Mandaic = 173,
    Manichaean = 174,
    Marchen = 175,
    Masaram_Gondi = 176,
    Mathematical_Alphanumeric_Symbols = 177,
    Mathematical_Operators = 178,
    Mayan_Numerals = 179,
    Medefaidrin = 180,
    Meetei_Mayek = 181,
    Meetei_Mayek_Extensions = 182,
    Mende_Kikakui = 183,
    Meroitic_Cursive = 184,
    Meroitic_Hieroglyphs = 185,
    Miao = 186,
    Miscellaneous_Mathematical_Symbols_A = 187,
    Miscellaneous_Mathematical_Symbols_B = 188,
    Miscellaneous_Symbols = 189,
    Miscellaneous_Symbols_And_Arrows = 190,
    Miscellaneous_Symbols_And_Pictographs = 191,
    Miscellaneous_Technical = 192,
    Modi = 193,
    Modifier_Tone_Letters = 194,
    Mongolian = 195,
    Mongolian_Supplement = 196,
    Mro = 197,
    Multani = 198,
    Musical_Symbols = 199,
    Myanmar = 200,
    Myanmar_Extended_A = 201,
    Myanmar_Extended_B = 202,
    NKo = 203,
    Nabataean = 204,
    Nandinagari = 205,
    New_Tai_Lue = 206,
    Newa = 207,
    No_Block = 208,
    Number_Forms = 209,
    Nushu = 210,
    Nyiakeng_Puachue_Hmong = 211,
    Ogham = 212,
    Ol_Chiki = 213,
    Old_Hungarian = 214,
    Old_Italic = 215,
    Old_North_Arabian = 216,
    Old_Permic = 217,
    Old_Persian = 218,
    Old_Sogdian = 219,
    Old_South_Arabian = 220,
    Old_Turkic = 221,
    Optical_Character_Recognition = 222,
    Oriya = 223,
    Ornamental_Dingbats = 224,
    Osage = 225,
    Osmanya = 226,
    Ottoman_Siyaq_Numbers = 227,
    Pahawh_Hmong = 228,
    Palmyrene = 229,
    Pau_Cin_Hau = 230,
    Phags_Pa = 231,
    Phaistos_Disc = 232,
    Phoenician = 233,
    Phonetic_Extensions = 234,
    Phonetic_Extensions_Supplement = 235,
    Playing_Cards = 236,
    Private_Use_Area = 237,
    Psalter_Pahlavi = 238,
    Rejang = 239,
    Rumi_Numeral_Symbols = 240,
    Runic = 241,
    Samaritan = 242,
    Saurashtra = 243,
    Sharada = 244,
    Shavian = 245,
    Shorthand_Format_Controls = 246,
    Siddham = 247,
    Sinhala = 248,
    Sinhala_Archaic_Numbers = 249,
    Small_Form_Variants = 250,
    Small_Kana_Extension = 251,
    Sogdian = 252,
    Sora_Sompeng = 253,
    Soyombo = 254,
    Spacing_Modifier_Letters = 255,
    Specials = 256,
    Sundanese = 257,
    Sundanese_Supplement = 258,
    Superscripts_And_Subscripts = 259,
    Supplemental_Arrows_A = 260,
    Supplemental_Arrows_B = 261,
    Supplemental_Arrows_C = 262,
    Supplemental_Mathematical_Operators = 263,
    Supplemental_Punctuation = 264,
    Supplemental_Symbols_And_Pictographs = 265,
    Supplementary_Private_Use_Area_A = 266,
    Supplementary_Private_Use_Area_B = 267,
    Sutton_SignWriting = 268,
    Syloti_Nagri = 269,
    Symbols_And_Pictographs_Extended_A = 270,
    Symbols_For_Legacy_Computing = 271,
    Syriac = 272,
    Syriac_Supplement = 273,
    Tagalog = 274,
    Tagbanwa = 275,
    Tags = 276,
    Tai_Le = 277,
    Tai_Tham = 278,
    Tai_Viet = 279,
    Tai_Xuan_Jing_Symbols = 280,
    Takri = 281,
    Tamil = 282,
    Tamil_Supplement = 283,
    Tangut = 284,
    Tangut_Components = 285,
    Tangut_Supplement = 286,
    Telugu = 287,
    Thaana = 288,
    Thai = 289,
    Tibetan = 290,
    Tifinagh = 291,
    Tirhuta = 292,
    Transport_And_Map_Symbols = 293,
    Ugaritic = 294,
    Unified_Canadian_Aboriginal_Syllabics = 295,
    Unified_Canadian_Aboriginal_Syllabics_Extended = 296,
    Vai = 297,
    Variation_Selectors = 298,
    Variation_Selectors_Supplement = 299,
    Vedic_Extensions = 300,
    Vertical_Forms = 301,
    Wancho = 302,
    Warang_Citi = 303,
    Yezidi = 304,
    Yi_Radicals = 305,
    Yi_Syllables = 306,
    Yijing_Hexagram_Symbols = 307,
    Zanabazar_Square = 308,
};

enum class Canonical_Combining_Class {
    A = 0,
    AL = 1,
    AR = 2,
    ATA = 3,
    ATAR = 4,
    ATB = 5,
    ATBL = 6,
    B = 7,
    BL = 8,
    BR = 9,
    CCC10 = 10,
    CCC103 = 11,
    CCC107 = 12,
    CCC11 = 13,
    CCC118 = 14,
    CCC12 = 15,
    CCC122 = 16,
    CCC129 = 17,
    CCC13 = 18,
    CCC130 = 19,
    CCC132 = 20,
    CCC133 = 21,
    CCC14 = 22,
    CCC15 = 23,
    CCC16 = 24,
    CCC17 = 25,
    CCC18 = 26,
    CCC19 = 27,
    CCC20 = 28,
    CCC21 = 29,
    CCC22 = 30,
    CCC23 = 31,
    CCC24 = 32,
    CCC25 = 33,
    CCC26 = 34,
    CCC27 = 35,
    CCC28 = 36,
    CCC29 = 37,
    CCC30 = 38,
    CCC31 = 39,
    CCC32 = 40,
    CCC33 = 41,
    CCC34 = 42,
    CCC35 = 43,
    CCC36 = 44,
    CCC84 = 45,
    CCC91 = 46,
    DA = 47,
    DB = 48,
    HANR = 49,
    IS = 50,
    KV = 51,
    L = 52,
    NK = 53,
    NR = 54,
    OV = 55,
    R = 56,
    VR = 57,
};

enum class Decomposition_Type {
    Canonical = 0,
    Circle = 1,
    Compat = 2,
    Final = 3,
    Font = 4,
    Fraction = 5,
    Initial = 6,
    Isolated = 7,
    Medial = 8,
    Narrow = 9,
    Nobreak = 10,
    None = 11,
    Small = 12,
    Square = 13,
    Sub = 14,
    Super = 15,
    Vertical = 16,
    Wide = 17,
};

enum class East_Asian_Width {
    Ambiguous = 0,
    Fullwidth = 1,
    Halfwidth = 2,
    Narrow = 3,
    Neutral = 4,
    Wide = 5,
};

enum class Hangul_Syllable_Type {
    LVT_Syllable = 0,
    LV_Syllable = 1,
    Leading_Jamo = 2,
    Not_Applicable = 3,
    Trailing_Jamo = 4,
    Vowel_Jamo = 5,
};

enum class Indic_Positional_Category {
    Bottom = 0,
    Bottom_And_Left = 1,
    Bottom_And_Right = 2,
    Left = 3,
    Left_And_Right = 4,
    NA = 5,
    Overstruck = 6,
    Right = 7,
    Top = 8,
    Top_And_Bottom = 9,
    Top_And_Bottom_And_Left = 10,
    Top_And_Bottom_And_Right = 11,
    Top_And_Left = 12,
    Top_And_Left_And_Right = 13,
    Top_And_Right = 14,
    Visual_Order_Left = 15,
};

enum class Indic_Syllabic_Category {
    Avagraha = 0,
    Bindu = 1,
    Brahmi_Joining_Number = 2,
    Cantillation_Mark = 3,
    Consonant = 4,
    Consonant_Dead = 5,
    Consonant_Final = 6,
    Consonant_Head_Letter = 7,
    Consonant_Initial_Postfixed = 8,
    Consonant_Killer = 9,
    Consonant_Medial = 10,
    Consonant_Placeholder = 11,
    Consonant_Preceding_Repha = 12,
    Consonant_Prefixed = 13,
    Consonant_Subjoined = 14,
    Consonant_Succeeding_Repha = 15,
    Consonant_With_Stacker = 16,
    Gemination_Mark = 17,
    Invisible_Stacker = 18,
    Joiner = 19,
    Modifying_Letter = 20,
    Non_Joiner = 21,
    Nukta = 22,
    Number = 23,
    Number_Joiner = 24,
    Other = 25,
    Pure_Killer = 26,
    Register_Shifter = 27,
    Syllable_Modifier = 28,
    Tone_Letter = 29,
    Tone_Mark = 30,
    Virama = 31,
    Visarga = 32,
    Vowel = 33,
    Vowel_Dependent = 34,
    Vowel_Independent = 35,
};

enum class Jamo_Short_Name {
    A = 0,
    AE = 1,
    B = 2,
    BB = 3,
    BS = 4,
    C = 5,
    D = 6,
    DD = 7,
    E = 8,
    EO = 9,
    EU = 10,
    G = 11,
    GG = 12,
    GS = 13,
    H = 14,
    I = 15,
    J = 16,
    JJ = 17,
    K = 18,
    L = 19,
    LB = 20,
    LG = 21,
    LH = 22,
    LM = 23,
    LP = 24,
    LS = 25,
    LT = 26,
    M = 27,
    N = 28,
    NG = 29,
    NH = 30,
    NJ = 31,
    O = 32,
    OE = 33,
    P = 34,
    R = 35,
    S = 36,
    SS = 37,
    T = 38,
    U = 39,
    WA = 40,
    WAE = 41,
    WE = 42,
    WEO = 43,
    WI = 44,
    YA = 45,
    YAE = 46,
    YE = 47,
    YEO = 48,
    YI = 49,
    YO = 50,
    YU = 51,
};

enum class Joining_Group {
    African_Feh = 0,
    African_Noon = 1,
    African_Qaf = 2,
    Ain = 3,
    Alaph = 4,
    Alef = 5,
    Beh = 6,
    Beth = 7,
    Burushaski_Yeh_Barree = 8,
    Dal = 9,
    Dalath_Rish = 10,
    E = 11,
    Farsi_Yeh = 12,
    Fe = 13,
    Feh = 14,
    Final_Semkath = 15,
    Gaf = 16,
    Gamal = 17,
    Hah = 18,
    Hamza_On_Heh_Goal = 19,
    Hanifi_Rohingya_Kinna_Ya = 20,
    Hanifi_Rohingya_Pa = 21,
    He = 22,
    Heh = 23,
    Heh_Goal = 24,
    Heth = 25,
    Kaf = 26,
    Kaph = 27,
    Khaph = 28,
    Knotted_Heh = 29,
    Lam = 30,
    Lamadh = 31,
    Malayalam_Bha = 32,
    Malayalam_Ja = 33,
    Malayalam_Lla = 34,
    Malayalam_Llla = 35,
    Malayalam_Nga = 36,
    Malayalam_Nna = 37,
    Malayalam_Nnna = 38,
    Malayalam_Nya = 39,
    Malayalam_Ra = 40,
    Malayalam_Ssa = 41,
    Malayalam_Tta = 42,
    Manichaean_Aleph = 43,
    Manichaean_Ayin = 44,
    Manichaean_Beth = 45,
    Manichaean_Daleth = 46,
    Manichaean_Dhamedh = 47,
    Manichaean_Five = 48,
    Manichaean_Gimel = 49,
    Manichaean_Heth = 50,
    Manichaean_Hundred = 51,
    Manichaean_Kaph = 52,
    Manichaean_Lamedh = 53,
    Manichaean_Mem = 54,
    Manichaean_Nun = 55,
    Manichaean_One = 56,
    Manichaean_Pe = 57,
    Manichaean_Qoph = 58,
    Manichaean_Resh = 59,
    Manichaean_Sadhe = 60,
    Manichaean_Samekh = 61,
    Manichaean_Taw = 62,
    Manichaean_Ten = 63,
    Manichaean_Teth = 64,
    Manichaean_Thamedh = 65,
    Manichaean_Twenty = 66,
    Manichaean_Waw = 67,
    Manichaean_Yodh = 68,
    Manichaean_Zayin = 69,
    Meem = 70,
    Mim = 71,
    No_Joining_Group = 72,
    Noon = 73,
    Nun = 74,
    Nya = 75,
    Pe = 76,
    Qaf = 77,
    Qaph = 78,
    Reh = 79,
    Reversed_Pe = 80,
    Rohingya_Yeh = 81,
    Sad = 82,
    Sadhe = 83,
    Seen = 84,
    Semkath = 85,
    Shin = 86,
    Straight_Waw = 87,
    Swash_Kaf = 88,
    Syriac_Waw = 89,
    Tah = 90,
    Taw = 91,
    Teh_Marbuta = 92,
    Teth = 93,
    Waw = 94,
    Yeh = 95,
    Yeh_Barree = 96,
    Yeh_With_Tail = 97,
    Yudh = 98,
    Yudh_He = 99,
    Zain = 100,
    Zhain = 101,
};

enum class Joining_Type {
    Dual_Joining = 0,
    Join_Causing = 1,
    Left_Joining = 2,
    Non_Joining = 3,
    Right_Joining = 4,
    Transparent = 5,
};

enum class Line_Break {
    Alphabetic = 0,
    Ambiguous = 1,
    Break_After = 2,
    Break_Before = 3,
    Break_Both = 4,
    Break_Symbols = 5,
    Carriage_Return = 6,
    Close_Parenthesis = 7,
    Close_Punctuation = 8,
    Combining_Mark = 9,
    Complex_Context = 10,
    Conditional_Japanese_Starter = 11,
    Contingent_Break = 12,
    E_Base = 13,
    E_Modifier = 14,
    Exclamation = 15,
    Glue = 16,
    H2 = 17,
    H3 = 18,
    Hebrew_Letter = 19,
    Hyphen = 20,
    Ideographic = 21,
    Infix_Numeric = 22,
    Inseparable = 23,
    JL = 24,
    JT = 25,
    JV = 26,
    Line_Feed = 27,
    Mandatory_Break = 28,
    Next_Line = 29,
    Nonstarter = 30,
    Numeric = 31,
    Open_Punctuation = 32,
    Postfix_Numeric = 33,
    Prefix_Numeric = 34,
    Quotation = 35,
    Regional_Indicator = 36,
    Space = 37,
    Surrogate = 38,
    Unknown = 39,
    Word_Joiner = 40,
    ZWJ = 41,
    ZWSpace = 42,
};

enum class NFC_Quick_Check {
    Maybe = 0,
    No = 1,
    Yes = 2,
};

enum class NFKC_Quick_Check {
    Maybe = 0,
    No = 1,
    Yes = 2,
};

enum class Numeric_Type {
    Decimal = 0,
    Digit = 1,
    None = 2,
    Numeric = 3,
};

enum class Script {
    Unknown = 0,
    Common = 1,
    Inherited = 2,
    Adlam = 3,
    Ahom = 4,
    Anatolian_Hieroglyphs = 5,
    Arabic = 6,
    Armenian = 7,
    Avestan = 8,
    Balinese = 9,
    Bamum = 10,
    Bassa_Vah = 11,
    Batak = 12,
    Bengali = 13,
    Bhaiksuki = 14,
    Bopomofo = 15,
    Brahmi = 16,
    Braille = 17,
    Buginese = 18,
    Buhid = 19,
    Canadian_Aboriginal = 20,
    Carian = 21,
    Caucasian_Albanian = 22,
    Chakma = 23,
    Cham = 24,
    Cherokee = 25,
    Chorasmian = 26,
    Coptic = 27,
    Cuneiform = 28,
    Cypriot = 29,
    Cyrillic = 30,
    Deseret = 31,
    Devanagari = 32,
    Dives_Akuru = 33,
    Dogra = 34,
    Duployan = 35,
    Egyptian_Hieroglyphs = 36,
    Elbasan = 37,
    Elymaic = 38,
    Ethiopic = 39,
    Georgian = 40,
    Glagolitic = 41,
    Gothic = 42,
    Grantha = 43,
    Greek = 44,
    Gujarati = 45,
    Gunjala_Gondi = 46,
    Gurmukhi = 47,
    Han = 48,
    Hangul = 49,
    Hanifi_Rohingya = 50,
    Hanunoo = 51,
    Hatran = 52,
    Hebrew = 53,
    Hiragana = 54,
    Imperial_Aramaic = 55,
    Inscriptional_Pahlavi = 56,
    Inscriptional_Parthian = 57,
    Javanese = 58,
    Kaithi = 59,
    Kannada = 60,
    Katakana = 61,
    Katakana_Or_Hiragana = 62,
    Kayah_Li = 63,
    Kharoshthi = 64,
    Khitan_Small_Script = 65,
    Khmer = 66,
    Khojki = 67,
    Khudawadi = 68,
    Lao = 69,
    Latin = 70,
    Lepcha = 71,
    Limbu = 72,
    Linear_A = 73,
    Linear_B = 74,
    Lisu = 75,
    Lycian = 76,
    Lydian = 77,
    Mahajani = 78,
    Makasar = 79,
    Malayalam = 80,
    Mandaic = 81,
    Manichaean = 82,
    Marchen = 83,
    Masaram_Gondi = 84,
    Medefaidrin = 85,
    Meetei_Mayek = 86,
    Mende_Kikakui = 87,
    Meroitic_Cursive = 88,
    Meroitic_Hieroglyphs = 89,
    Miao = 90,
    Modi = 91,
    Mongolian = 92,
    Mro = 93,
    Multani = 94,
    Myanmar = 95,
    Nabataean = 96,
    Nandinagari = 97,
    New_Tai_Lue = 98,
    Newa = 99,
    Nko = 100,
    Nushu = 101,
    Nyiakeng_Puachue_Hmong = 102,
    Ogham = 103,
    Ol_Chiki = 104,
    Old_Hungarian = 105,
    Old_Italic = 106,
    Old_North_Arabian = 107,
    Old_Permic = 108,
    Old_Persian = 109,
    Old_Sogdian = 110,
    Old_South_Arabian = 111,
    Old_Turkic = 112,
    Oriya = 113,
    Osage = 114,
    Osmanya = 115,
    Pahawh_Hmong = 116,
    Palmyrene = 117,
    Pau_Cin_Hau = 118,
    Phags_Pa = 119,
    Phoenician = 120,
    Psalter_Pahlavi = 121,
    Rejang = 122,
    Runic = 123,
    Samaritan = 124,
    Saurashtra = 125,
    Sharada = 126,
    Shavian = 127,
    Siddham = 128,
    SignWriting = 129,
    Sinhala = 130,
    Sogdian = 131,
    Sora_Sompeng = 132,
    Soyombo = 133,
    Sundanese = 134,
    Syloti_Nagri = 135,
    Syriac = 136,
    Tagalog = 137,
    Tagbanwa = 138,
    Tai_Le = 139,
    Tai_Tham = 140,
    Tai_Viet = 141,
    Takri = 142,
    Tamil = 143,
    Tangut = 144,
    Telugu = 145,
    Thaana = 146,
    Thai = 147,
    Tibetan = 148,
    Tifinagh = 149,
    Tirhuta = 150,
    Ugaritic = 151,
    Vai = 152,
    Wancho = 153,
    Warang_Citi = 154,
    Yezidi = 155,
    Yi = 156,
    Zanabazar_Square = 157,
};

enum class Sentence_Break {
    ATerm = 0,
    CR = 1,
    Close = 2,
    Extend = 3,
    Format = 4,
    LF = 5,
    Lower = 6,
    Numeric = 7,
    OLetter = 8,
    Other = 9,
    SContinue = 10,
    STerm = 11,
    Sep = 12,
    Sp = 13,
    Upper = 14,
};

enum class Vertical_Orientation {
    Rotated = 0,
    Transformed_Rotated = 1,
    Transformed_Upright = 2,
    Upright = 3,
};

enum class Word_Break {
    ALetter = 0,
    CR = 1,
    Double_Quote = 2,
    E_Base = 3,
    E_Base_GAZ = 4,
    E_Modifier = 5,
    Extend = 6,
    ExtendNumLet = 7,
    Format = 8,
    Glue_After_Zwj = 9,
    Hebrew_Letter = 10,
    Katakana = 11,
    LF = 12,
    MidLetter = 13,
    MidNum = 14,
    MidNumLet = 15,
    Newline = 16,
    Numeric = 17,
    Other = 18,
    Regional_Indicator = 19,
    Single_Quote = 20,
    WSegSpace = 21,
    ZWJ = 22,
};

// }}}

enum class Core_Property {
    Alphabetic,
    Case_Ignorable,
    Cased,
    Changes_When_Casefolded,
    Changes_When_Casemapped,
    Changes_When_Lowercased,
    Changes_When_Titlecased,
    Changes_When_Uppercased,
    Default_Ignorable_Code_Point,
    Grapheme_Base,
    Grapheme_Extend,
    Grapheme_Link,
    ID_Continue,
    ID_Start,
    Lowercase,
    Math,
    Uppercase,
    XID_Continue,
    XID_Start,
};

bool contains(Core_Property _prop, char32_t _codepoint) noexcept;

enum class General_Category {
    Unspecified,
    Close_Punctuation,
    Connector_Punctuation,
    Control,
    Currency_Symbol,
    Dash_Punctuation,
    Decimal_Number,
    Enclosing_Mark,
    Final_Punctuation,
    Format,
    Initial_Punctuation,
    Letter_Number,
    Line_Separator,
    Lowercase_Letter,
    Math_Symbol,
    Modifier_Letter,
    Modifier_Symbol,
    Nonspacing_Mark,
    Open_Punctuation,
    Other_Letter,
    Other_Number,
    Other_Punctuation,
    Other_Symbol,
    Paragraph_Separator,
    Private_Use,
    Space_Separator,
    Spacing_Mark,
    Surrogate,
    Titlecase_Letter,
    Unassigned,
    Uppercase_Letter,
};

bool contains(General_Category _cat, char32_t _codepoint) noexcept;

namespace general_category {
    General_Category get(char32_t _value) noexcept;

    inline bool close_punctuation(char32_t _codepoint) { return contains(General_Category::Close_Punctuation, _codepoint); }
    inline bool connector_punctuation(char32_t _codepoint) { return contains(General_Category::Connector_Punctuation, _codepoint); }
    inline bool control(char32_t _codepoint) { return contains(General_Category::Control, _codepoint); }
    inline bool currency_symbol(char32_t _codepoint) { return contains(General_Category::Currency_Symbol, _codepoint); }
    inline bool dash_punctuation(char32_t _codepoint) { return contains(General_Category::Dash_Punctuation, _codepoint); }
    inline bool decimal_number(char32_t _codepoint) { return contains(General_Category::Decimal_Number, _codepoint); }
    inline bool enclosing_mark(char32_t _codepoint) { return contains(General_Category::Enclosing_Mark, _codepoint); }
    inline bool final_punctuation(char32_t _codepoint) { return contains(General_Category::Final_Punctuation, _codepoint); }
    inline bool format(char32_t _codepoint) { return contains(General_Category::Format, _codepoint); }
    inline bool initial_punctuation(char32_t _codepoint) { return contains(General_Category::Initial_Punctuation, _codepoint); }
    inline bool letter_number(char32_t _codepoint) { return contains(General_Category::Letter_Number, _codepoint); }
    inline bool line_separator(char32_t _codepoint) { return contains(General_Category::Line_Separator, _codepoint); }
    inline bool lowercase_letter(char32_t _codepoint) { return contains(General_Category::Lowercase_Letter, _codepoint); }
    inline bool math_symbol(char32_t _codepoint) { return contains(General_Category::Math_Symbol, _codepoint); }
    inline bool modifier_letter(char32_t _codepoint) { return contains(General_Category::Modifier_Letter, _codepoint); }
    inline bool modifier_symbol(char32_t _codepoint) { return contains(General_Category::Modifier_Symbol, _codepoint); }
    inline bool nonspacing_mark(char32_t _codepoint) { return contains(General_Category::Nonspacing_Mark, _codepoint); }
    inline bool open_punctuation(char32_t _codepoint) { return contains(General_Category::Open_Punctuation, _codepoint); }
    inline bool other_letter(char32_t _codepoint) { return contains(General_Category::Other_Letter, _codepoint); }
    inline bool other_number(char32_t _codepoint) { return contains(General_Category::Other_Number, _codepoint); }
    inline bool other_punctuation(char32_t _codepoint) { return contains(General_Category::Other_Punctuation, _codepoint); }
    inline bool other_symbol(char32_t _codepoint) { return contains(General_Category::Other_Symbol, _codepoint); }
    inline bool paragraph_separator(char32_t _codepoint) { return contains(General_Category::Paragraph_Separator, _codepoint); }
    inline bool private_use(char32_t _codepoint) { return contains(General_Category::Private_Use, _codepoint); }
    inline bool space_separator(char32_t _codepoint) { return contains(General_Category::Space_Separator, _codepoint); }
    inline bool spacing_mark(char32_t _codepoint) { return contains(General_Category::Spacing_Mark, _codepoint); }
    inline bool surrogate(char32_t _codepoint) { return contains(General_Category::Surrogate, _codepoint); }
    inline bool titlecase_letter(char32_t _codepoint) { return contains(General_Category::Titlecase_Letter, _codepoint); }
    inline bool unassigned(char32_t _codepoint) { return contains(General_Category::Unassigned, _codepoint); }
    inline bool uppercase_letter(char32_t _codepoint) { return contains(General_Category::Uppercase_Letter, _codepoint); }
}

Script script(char32_t _codepoint) noexcept;

size_t script_extensions(char32_t _codepoint, Script* _result, size_t _capacity) noexcept;

enum class Grapheme_Cluster_Break {
    CR,
    Control,
    Extend,
    L,
    LF,
    LV,
    LVT,
    Prepend,
    Regional_Indicator,
    SpacingMark,
    T,
    V,
    ZWJ,
};

namespace grapheme_cluster_break {
    bool cr(char32_t _codepoint) noexcept;
    bool control(char32_t _codepoint) noexcept;
    bool extend(char32_t _codepoint) noexcept;
    bool l(char32_t _codepoint) noexcept;
    bool lf(char32_t _codepoint) noexcept;
    bool lv(char32_t _codepoint) noexcept;
    bool lvt(char32_t _codepoint) noexcept;
    bool prepend(char32_t _codepoint) noexcept;
    bool regional_indicator(char32_t _codepoint) noexcept;
    bool spacingmark(char32_t _codepoint) noexcept;
    bool t(char32_t _codepoint) noexcept;
    bool v(char32_t _codepoint) noexcept;
    bool zwj(char32_t _codepoint) noexcept;
}

enum class EastAsianWidth {
    Ambiguous,
    FullWidth,
    HalfWidth,
    Neutral,
    Narrow,
    Wide,
    Unspecified,
};

inline std::string to_string(EastAsianWidth _value) {
    switch (_value) {
        case EastAsianWidth::Ambiguous: return "Ambiguous";
        case EastAsianWidth::FullWidth: return "FullWidth";
        case EastAsianWidth::HalfWidth: return "HalfWidth";
        case EastAsianWidth::Neutral: return "Neutral";
        case EastAsianWidth::Narrow: return "Narrow";
        case EastAsianWidth::Wide: return "Wide";
        case EastAsianWidth::Unspecified: return "Unspecified";
    }
    return "Unknown";
};

EastAsianWidth east_asian_width(char32_t _codepoint) noexcept;

bool emoji(char32_t _codepoint) noexcept;
bool emoji_component(char32_t _codepoint) noexcept;
bool emoji_modifier(char32_t _codepoint) noexcept;
bool emoji_modifier_base(char32_t _codepoint) noexcept;
bool emoji_presentation(char32_t _codepoint) noexcept;
bool extended_pictographic(char32_t _codepoint) noexcept;

} // end namespace
