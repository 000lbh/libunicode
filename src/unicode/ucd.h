/**
 * This file is part of the "libunicode" project
 *   Copyright (c) 2020 Christian Parpart <christian@parpart.family>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#pragma once

#include <array>
#include <optional>
#include <string>
#include <utility>

namespace unicode {

// {{{ General property enum classes
enum class Age {
    Unassigned,
    V10_0,
    V11_0,
    V12_0,
    V12_1,
    V13_0,
    V1_1,
    V2_0,
    V2_1,
    V3_0,
    V3_1,
    V3_2,
    V4_0,
    V4_1,
    V5_0,
    V5_1,
    V5_2,
    V6_0,
    V6_1,
    V6_2,
    V6_3,
    V7_0,
    V8_0,
    V9_0,
};

enum class Bidi_Class {
    Arabic_Letter,
    Arabic_Number,
    Boundary_Neutral,
    Common_Separator,
    European_Number,
    European_Separator,
    European_Terminator,
    First_Strong_Isolate,
    Left_To_Right,
    Left_To_Right_Embedding,
    Left_To_Right_Isolate,
    Left_To_Right_Override,
    Nonspacing_Mark,
    Other_Neutral,
    Paragraph_Separator,
    Pop_Directional_Format,
    Pop_Directional_Isolate,
    Right_To_Left,
    Right_To_Left_Embedding,
    Right_To_Left_Isolate,
    Right_To_Left_Override,
    Segment_Separator,
    White_Space,
};

enum class Bidi_Paired_Bracket_Type {
    Close,
    None,
    Open,
};

enum class Block {
    Adlam,
    Aegean_Numbers,
    Ahom,
    Alchemical_Symbols,
    Alphabetic_Presentation_Forms,
    Anatolian_Hieroglyphs,
    Ancient_Greek_Musical_Notation,
    Ancient_Greek_Numbers,
    Ancient_Symbols,
    Arabic,
    Arabic_Extended_A,
    Arabic_Mathematical_Alphabetic_Symbols,
    Arabic_Presentation_Forms_A,
    Arabic_Presentation_Forms_B,
    Arabic_Supplement,
    Armenian,
    Arrows,
    Avestan,
    Balinese,
    Bamum,
    Bamum_Supplement,
    Basic_Latin,
    Bassa_Vah,
    Batak,
    Bengali,
    Bhaiksuki,
    Block_Elements,
    Bopomofo,
    Bopomofo_Extended,
    Box_Drawing,
    Brahmi,
    Braille_Patterns,
    Buginese,
    Buhid,
    Byzantine_Musical_Symbols,
    CJK_Compatibility,
    CJK_Compatibility_Forms,
    CJK_Compatibility_Ideographs,
    CJK_Compatibility_Ideographs_Supplement,
    CJK_Radicals_Supplement,
    CJK_Strokes,
    CJK_Symbols_And_Punctuation,
    CJK_Unified_Ideographs,
    CJK_Unified_Ideographs_Extension_A,
    CJK_Unified_Ideographs_Extension_B,
    CJK_Unified_Ideographs_Extension_C,
    CJK_Unified_Ideographs_Extension_D,
    CJK_Unified_Ideographs_Extension_E,
    CJK_Unified_Ideographs_Extension_F,
    CJK_Unified_Ideographs_Extension_G,
    Carian,
    Caucasian_Albanian,
    Chakma,
    Cham,
    Cherokee,
    Cherokee_Supplement,
    Chess_Symbols,
    Chorasmian,
    Combining_Diacritical_Marks,
    Combining_Diacritical_Marks_Extended,
    Combining_Diacritical_Marks_For_Symbols,
    Combining_Diacritical_Marks_Supplement,
    Combining_Half_Marks,
    Common_Indic_Number_Forms,
    Control_Pictures,
    Coptic,
    Coptic_Epact_Numbers,
    Counting_Rod_Numerals,
    Cuneiform,
    Cuneiform_Numbers_And_Punctuation,
    Currency_Symbols,
    Cypriot_Syllabary,
    Cyrillic,
    Cyrillic_Extended_A,
    Cyrillic_Extended_B,
    Cyrillic_Extended_C,
    Cyrillic_Supplement,
    Deseret,
    Devanagari,
    Devanagari_Extended,
    Dingbats,
    Dives_Akuru,
    Dogra,
    Domino_Tiles,
    Duployan,
    Early_Dynastic_Cuneiform,
    Egyptian_Hieroglyph_Format_Controls,
    Egyptian_Hieroglyphs,
    Elbasan,
    Elymaic,
    Emoticons,
    Enclosed_Alphanumeric_Supplement,
    Enclosed_Alphanumerics,
    Enclosed_CJK_Letters_And_Months,
    Enclosed_Ideographic_Supplement,
    Ethiopic,
    Ethiopic_Extended,
    Ethiopic_Extended_A,
    Ethiopic_Supplement,
    General_Punctuation,
    Geometric_Shapes,
    Geometric_Shapes_Extended,
    Georgian,
    Georgian_Extended,
    Georgian_Supplement,
    Glagolitic,
    Glagolitic_Supplement,
    Gothic,
    Grantha,
    Greek_And_Coptic,
    Greek_Extended,
    Gujarati,
    Gunjala_Gondi,
    Gurmukhi,
    Halfwidth_And_Fullwidth_Forms,
    Hangul_Compatibility_Jamo,
    Hangul_Jamo,
    Hangul_Jamo_Extended_A,
    Hangul_Jamo_Extended_B,
    Hangul_Syllables,
    Hanifi_Rohingya,
    Hanunoo,
    Hatran,
    Hebrew,
    High_Private_Use_Surrogates,
    High_Surrogates,
    Hiragana,
    IPA_Extensions,
    Ideographic_Description_Characters,
    Ideographic_Symbols_And_Punctuation,
    Imperial_Aramaic,
    Indic_Siyaq_Numbers,
    Inscriptional_Pahlavi,
    Inscriptional_Parthian,
    Javanese,
    Kaithi,
    Kana_Extended_A,
    Kana_Supplement,
    Kanbun,
    Kangxi_Radicals,
    Kannada,
    Katakana,
    Katakana_Phonetic_Extensions,
    Kayah_Li,
    Kharoshthi,
    Khitan_Small_Script,
    Khmer,
    Khmer_Symbols,
    Khojki,
    Khudawadi,
    Lao,
    Latin_1_Supplement,
    Latin_Extended_A,
    Latin_Extended_Additional,
    Latin_Extended_B,
    Latin_Extended_C,
    Latin_Extended_D,
    Latin_Extended_E,
    Lepcha,
    Letterlike_Symbols,
    Limbu,
    Linear_A,
    Linear_B_Ideograms,
    Linear_B_Syllabary,
    Lisu,
    Lisu_Supplement,
    Low_Surrogates,
    Lycian,
    Lydian,
    Mahajani,
    Mahjong_Tiles,
    Makasar,
    Malayalam,
    Mandaic,
    Manichaean,
    Marchen,
    Masaram_Gondi,
    Mathematical_Alphanumeric_Symbols,
    Mathematical_Operators,
    Mayan_Numerals,
    Medefaidrin,
    Meetei_Mayek,
    Meetei_Mayek_Extensions,
    Mende_Kikakui,
    Meroitic_Cursive,
    Meroitic_Hieroglyphs,
    Miao,
    Miscellaneous_Mathematical_Symbols_A,
    Miscellaneous_Mathematical_Symbols_B,
    Miscellaneous_Symbols,
    Miscellaneous_Symbols_And_Arrows,
    Miscellaneous_Symbols_And_Pictographs,
    Miscellaneous_Technical,
    Modi,
    Modifier_Tone_Letters,
    Mongolian,
    Mongolian_Supplement,
    Mro,
    Multani,
    Musical_Symbols,
    Myanmar,
    Myanmar_Extended_A,
    Myanmar_Extended_B,
    NKo,
    Nabataean,
    Nandinagari,
    New_Tai_Lue,
    Newa,
    No_Block,
    Number_Forms,
    Nushu,
    Nyiakeng_Puachue_Hmong,
    Ogham,
    Ol_Chiki,
    Old_Hungarian,
    Old_Italic,
    Old_North_Arabian,
    Old_Permic,
    Old_Persian,
    Old_Sogdian,
    Old_South_Arabian,
    Old_Turkic,
    Optical_Character_Recognition,
    Oriya,
    Ornamental_Dingbats,
    Osage,
    Osmanya,
    Ottoman_Siyaq_Numbers,
    Pahawh_Hmong,
    Palmyrene,
    Pau_Cin_Hau,
    Phags_Pa,
    Phaistos_Disc,
    Phoenician,
    Phonetic_Extensions,
    Phonetic_Extensions_Supplement,
    Playing_Cards,
    Private_Use_Area,
    Psalter_Pahlavi,
    Rejang,
    Rumi_Numeral_Symbols,
    Runic,
    Samaritan,
    Saurashtra,
    Sharada,
    Shavian,
    Shorthand_Format_Controls,
    Siddham,
    Sinhala,
    Sinhala_Archaic_Numbers,
    Small_Form_Variants,
    Small_Kana_Extension,
    Sogdian,
    Sora_Sompeng,
    Soyombo,
    Spacing_Modifier_Letters,
    Specials,
    Sundanese,
    Sundanese_Supplement,
    Superscripts_And_Subscripts,
    Supplemental_Arrows_A,
    Supplemental_Arrows_B,
    Supplemental_Arrows_C,
    Supplemental_Mathematical_Operators,
    Supplemental_Punctuation,
    Supplemental_Symbols_And_Pictographs,
    Supplementary_Private_Use_Area_A,
    Supplementary_Private_Use_Area_B,
    Sutton_SignWriting,
    Syloti_Nagri,
    Symbols_And_Pictographs_Extended_A,
    Symbols_For_Legacy_Computing,
    Syriac,
    Syriac_Supplement,
    Tagalog,
    Tagbanwa,
    Tags,
    Tai_Le,
    Tai_Tham,
    Tai_Viet,
    Tai_Xuan_Jing_Symbols,
    Takri,
    Tamil,
    Tamil_Supplement,
    Tangut,
    Tangut_Components,
    Tangut_Supplement,
    Telugu,
    Thaana,
    Thai,
    Tibetan,
    Tifinagh,
    Tirhuta,
    Transport_And_Map_Symbols,
    Ugaritic,
    Unified_Canadian_Aboriginal_Syllabics,
    Unified_Canadian_Aboriginal_Syllabics_Extended,
    Vai,
    Variation_Selectors,
    Variation_Selectors_Supplement,
    Vedic_Extensions,
    Vertical_Forms,
    Wancho,
    Warang_Citi,
    Yezidi,
    Yi_Radicals,
    Yi_Syllables,
    Yijing_Hexagram_Symbols,
    Zanabazar_Square,
};

enum class Canonical_Combining_Class {
    A,
    AL,
    AR,
    ATA,
    ATAR,
    ATB,
    ATBL,
    B,
    BL,
    BR,
    CCC10,
    CCC103,
    CCC107,
    CCC11,
    CCC118,
    CCC12,
    CCC122,
    CCC129,
    CCC13,
    CCC130,
    CCC132,
    CCC133,
    CCC14,
    CCC15,
    CCC16,
    CCC17,
    CCC18,
    CCC19,
    CCC20,
    CCC21,
    CCC22,
    CCC23,
    CCC24,
    CCC25,
    CCC26,
    CCC27,
    CCC28,
    CCC29,
    CCC30,
    CCC31,
    CCC32,
    CCC33,
    CCC34,
    CCC35,
    CCC36,
    CCC84,
    CCC91,
    DA,
    DB,
    HANR,
    IS,
    KV,
    L,
    NK,
    NR,
    OV,
    R,
    VR,
};

enum class Decomposition_Type {
    Canonical,
    Circle,
    Compat,
    Final,
    Font,
    Fraction,
    Initial,
    Isolated,
    Medial,
    Narrow,
    Nobreak,
    None,
    Small,
    Square,
    Sub,
    Super,
    Vertical,
    Wide,
};

enum class East_Asian_Width {
    Ambiguous,
    Fullwidth,
    Halfwidth,
    Narrow,
    Neutral,
    Wide,
};

enum class Hangul_Syllable_Type {
    LVT_Syllable,
    LV_Syllable,
    Leading_Jamo,
    Not_Applicable,
    Trailing_Jamo,
    Vowel_Jamo,
};

enum class Indic_Positional_Category {
    Bottom,
    Bottom_And_Left,
    Bottom_And_Right,
    Left,
    Left_And_Right,
    NA,
    Overstruck,
    Right,
    Top,
    Top_And_Bottom,
    Top_And_Bottom_And_Left,
    Top_And_Bottom_And_Right,
    Top_And_Left,
    Top_And_Left_And_Right,
    Top_And_Right,
    Visual_Order_Left,
};

enum class Indic_Syllabic_Category {
    Avagraha,
    Bindu,
    Brahmi_Joining_Number,
    Cantillation_Mark,
    Consonant,
    Consonant_Dead,
    Consonant_Final,
    Consonant_Head_Letter,
    Consonant_Initial_Postfixed,
    Consonant_Killer,
    Consonant_Medial,
    Consonant_Placeholder,
    Consonant_Preceding_Repha,
    Consonant_Prefixed,
    Consonant_Subjoined,
    Consonant_Succeeding_Repha,
    Consonant_With_Stacker,
    Gemination_Mark,
    Invisible_Stacker,
    Joiner,
    Modifying_Letter,
    Non_Joiner,
    Nukta,
    Number,
    Number_Joiner,
    Other,
    Pure_Killer,
    Register_Shifter,
    Syllable_Modifier,
    Tone_Letter,
    Tone_Mark,
    Virama,
    Visarga,
    Vowel,
    Vowel_Dependent,
    Vowel_Independent,
};

enum class Jamo_Short_Name {
    A,
    AE,
    B,
    BB,
    BS,
    C,
    D,
    DD,
    E,
    EO,
    EU,
    G,
    GG,
    GS,
    H,
    I,
    J,
    JJ,
    K,
    L,
    LB,
    LG,
    LH,
    LM,
    LP,
    LS,
    LT,
    M,
    N,
    NG,
    NH,
    NJ,
    O,
    OE,
    P,
    R,
    S,
    SS,
    T,
    U,
    WA,
    WAE,
    WE,
    WEO,
    WI,
    YA,
    YAE,
    YE,
    YEO,
    YI,
    YO,
    YU,
};

enum class Joining_Group {
    African_Feh,
    African_Noon,
    African_Qaf,
    Ain,
    Alaph,
    Alef,
    Beh,
    Beth,
    Burushaski_Yeh_Barree,
    Dal,
    Dalath_Rish,
    E,
    Farsi_Yeh,
    Fe,
    Feh,
    Final_Semkath,
    Gaf,
    Gamal,
    Hah,
    Hamza_On_Heh_Goal,
    Hanifi_Rohingya_Kinna_Ya,
    Hanifi_Rohingya_Pa,
    He,
    Heh,
    Heh_Goal,
    Heth,
    Kaf,
    Kaph,
    Khaph,
    Knotted_Heh,
    Lam,
    Lamadh,
    Malayalam_Bha,
    Malayalam_Ja,
    Malayalam_Lla,
    Malayalam_Llla,
    Malayalam_Nga,
    Malayalam_Nna,
    Malayalam_Nnna,
    Malayalam_Nya,
    Malayalam_Ra,
    Malayalam_Ssa,
    Malayalam_Tta,
    Manichaean_Aleph,
    Manichaean_Ayin,
    Manichaean_Beth,
    Manichaean_Daleth,
    Manichaean_Dhamedh,
    Manichaean_Five,
    Manichaean_Gimel,
    Manichaean_Heth,
    Manichaean_Hundred,
    Manichaean_Kaph,
    Manichaean_Lamedh,
    Manichaean_Mem,
    Manichaean_Nun,
    Manichaean_One,
    Manichaean_Pe,
    Manichaean_Qoph,
    Manichaean_Resh,
    Manichaean_Sadhe,
    Manichaean_Samekh,
    Manichaean_Taw,
    Manichaean_Ten,
    Manichaean_Teth,
    Manichaean_Thamedh,
    Manichaean_Twenty,
    Manichaean_Waw,
    Manichaean_Yodh,
    Manichaean_Zayin,
    Meem,
    Mim,
    No_Joining_Group,
    Noon,
    Nun,
    Nya,
    Pe,
    Qaf,
    Qaph,
    Reh,
    Reversed_Pe,
    Rohingya_Yeh,
    Sad,
    Sadhe,
    Seen,
    Semkath,
    Shin,
    Straight_Waw,
    Swash_Kaf,
    Syriac_Waw,
    Tah,
    Taw,
    Teh_Marbuta,
    Teth,
    Waw,
    Yeh,
    Yeh_Barree,
    Yeh_With_Tail,
    Yudh,
    Yudh_He,
    Zain,
    Zhain,
};

enum class Joining_Type {
    Dual_Joining,
    Join_Causing,
    Left_Joining,
    Non_Joining,
    Right_Joining,
    Transparent,
};

enum class Line_Break {
    Alphabetic,
    Ambiguous,
    Break_After,
    Break_Before,
    Break_Both,
    Break_Symbols,
    Carriage_Return,
    Close_Parenthesis,
    Close_Punctuation,
    Combining_Mark,
    Complex_Context,
    Conditional_Japanese_Starter,
    Contingent_Break,
    E_Base,
    E_Modifier,
    Exclamation,
    Glue,
    H2,
    H3,
    Hebrew_Letter,
    Hyphen,
    Ideographic,
    Infix_Numeric,
    Inseparable,
    JL,
    JT,
    JV,
    Line_Feed,
    Mandatory_Break,
    Next_Line,
    Nonstarter,
    Numeric,
    Open_Punctuation,
    Postfix_Numeric,
    Prefix_Numeric,
    Quotation,
    Regional_Indicator,
    Space,
    Surrogate,
    Unknown,
    Word_Joiner,
    ZWJ,
    ZWSpace,
};

enum class NFC_Quick_Check {
    Maybe,
    No,
    Yes,
};

enum class NFKC_Quick_Check {
    Maybe,
    No,
    Yes,
};

enum class Numeric_Type {
    Decimal,
    Digit,
    None,
    Numeric,
};

enum class Script {
    Unknown,
    Common,
    Inherited,
    Adlam,
    Ahom,
    Anatolian_Hieroglyphs,
    Arabic,
    Armenian,
    Avestan,
    Balinese,
    Bamum,
    Bassa_Vah,
    Batak,
    Bengali,
    Bhaiksuki,
    Bopomofo,
    Brahmi,
    Braille,
    Buginese,
    Buhid,
    Canadian_Aboriginal,
    Carian,
    Caucasian_Albanian,
    Chakma,
    Cham,
    Cherokee,
    Chorasmian,
    Coptic,
    Cuneiform,
    Cypriot,
    Cyrillic,
    Deseret,
    Devanagari,
    Dives_Akuru,
    Dogra,
    Duployan,
    Egyptian_Hieroglyphs,
    Elbasan,
    Elymaic,
    Ethiopic,
    Georgian,
    Glagolitic,
    Gothic,
    Grantha,
    Greek,
    Gujarati,
    Gunjala_Gondi,
    Gurmukhi,
    Han,
    Hangul,
    Hanifi_Rohingya,
    Hanunoo,
    Hatran,
    Hebrew,
    Hiragana,
    Imperial_Aramaic,
    Inscriptional_Pahlavi,
    Inscriptional_Parthian,
    Javanese,
    Kaithi,
    Kannada,
    Katakana,
    Katakana_Or_Hiragana,
    Kayah_Li,
    Kharoshthi,
    Khitan_Small_Script,
    Khmer,
    Khojki,
    Khudawadi,
    Lao,
    Latin,
    Lepcha,
    Limbu,
    Linear_A,
    Linear_B,
    Lisu,
    Lycian,
    Lydian,
    Mahajani,
    Makasar,
    Malayalam,
    Mandaic,
    Manichaean,
    Marchen,
    Masaram_Gondi,
    Medefaidrin,
    Meetei_Mayek,
    Mende_Kikakui,
    Meroitic_Cursive,
    Meroitic_Hieroglyphs,
    Miao,
    Modi,
    Mongolian,
    Mro,
    Multani,
    Myanmar,
    Nabataean,
    Nandinagari,
    New_Tai_Lue,
    Newa,
    Nko,
    Nushu,
    Nyiakeng_Puachue_Hmong,
    Ogham,
    Ol_Chiki,
    Old_Hungarian,
    Old_Italic,
    Old_North_Arabian,
    Old_Permic,
    Old_Persian,
    Old_Sogdian,
    Old_South_Arabian,
    Old_Turkic,
    Oriya,
    Osage,
    Osmanya,
    Pahawh_Hmong,
    Palmyrene,
    Pau_Cin_Hau,
    Phags_Pa,
    Phoenician,
    Psalter_Pahlavi,
    Rejang,
    Runic,
    Samaritan,
    Saurashtra,
    Sharada,
    Shavian,
    Siddham,
    SignWriting,
    Sinhala,
    Sogdian,
    Sora_Sompeng,
    Soyombo,
    Sundanese,
    Syloti_Nagri,
    Syriac,
    Tagalog,
    Tagbanwa,
    Tai_Le,
    Tai_Tham,
    Tai_Viet,
    Takri,
    Tamil,
    Tangut,
    Telugu,
    Thaana,
    Thai,
    Tibetan,
    Tifinagh,
    Tirhuta,
    Ugaritic,
    Vai,
    Wancho,
    Warang_Citi,
    Yezidi,
    Yi,
    Zanabazar_Square,
};

enum class Sentence_Break {
    ATerm,
    CR,
    Close,
    Extend,
    Format,
    LF,
    Lower,
    Numeric,
    OLetter,
    Other,
    SContinue,
    STerm,
    Sep,
    Sp,
    Upper,
};

enum class Vertical_Orientation {
    Rotated,
    Transformed_Rotated,
    Transformed_Upright,
    Upright,
};

enum class Word_Break {
    ALetter,
    CR,
    Double_Quote,
    E_Base,
    E_Base_GAZ,
    E_Modifier,
    Extend,
    ExtendNumLet,
    Format,
    Glue_After_Zwj,
    Hebrew_Letter,
    Katakana,
    LF,
    MidLetter,
    MidNum,
    MidNumLet,
    Newline,
    Numeric,
    Other,
    Regional_Indicator,
    Single_Quote,
    WSegSpace,
    ZWJ,
};

// }}}

enum class Core_Property {
    Alphabetic,
    Case_Ignorable,
    Cased,
    Changes_When_Casefolded,
    Changes_When_Casemapped,
    Changes_When_Lowercased,
    Changes_When_Titlecased,
    Changes_When_Uppercased,
    Default_Ignorable_Code_Point,
    Grapheme_Base,
    Grapheme_Extend,
    Grapheme_Link,
    ID_Continue,
    ID_Start,
    Lowercase,
    Math,
    Uppercase,
    XID_Continue,
    XID_Start,
};

bool contains(Core_Property _prop, char32_t _codepoint) noexcept;

enum class General_Category {
    Unspecified,
    Close_Punctuation,
    Connector_Punctuation,
    Control,
    Currency_Symbol,
    Dash_Punctuation,
    Decimal_Number,
    Enclosing_Mark,
    Final_Punctuation,
    Format,
    Initial_Punctuation,
    Letter_Number,
    Line_Separator,
    Lowercase_Letter,
    Math_Symbol,
    Modifier_Letter,
    Modifier_Symbol,
    Nonspacing_Mark,
    Open_Punctuation,
    Other_Letter,
    Other_Number,
    Other_Punctuation,
    Other_Symbol,
    Paragraph_Separator,
    Private_Use,
    Space_Separator,
    Spacing_Mark,
    Surrogate,
    Titlecase_Letter,
    Unassigned,
    Uppercase_Letter,
};

bool contains(General_Category _cat, char32_t _codepoint) noexcept;

namespace general_category {
    General_Category get(char32_t _value) noexcept;

    inline bool close_punctuation(char32_t _codepoint) { return contains(General_Category::Close_Punctuation, _codepoint); }
    inline bool connector_punctuation(char32_t _codepoint) { return contains(General_Category::Connector_Punctuation, _codepoint); }
    inline bool control(char32_t _codepoint) { return contains(General_Category::Control, _codepoint); }
    inline bool currency_symbol(char32_t _codepoint) { return contains(General_Category::Currency_Symbol, _codepoint); }
    inline bool dash_punctuation(char32_t _codepoint) { return contains(General_Category::Dash_Punctuation, _codepoint); }
    inline bool decimal_number(char32_t _codepoint) { return contains(General_Category::Decimal_Number, _codepoint); }
    inline bool enclosing_mark(char32_t _codepoint) { return contains(General_Category::Enclosing_Mark, _codepoint); }
    inline bool final_punctuation(char32_t _codepoint) { return contains(General_Category::Final_Punctuation, _codepoint); }
    inline bool format(char32_t _codepoint) { return contains(General_Category::Format, _codepoint); }
    inline bool initial_punctuation(char32_t _codepoint) { return contains(General_Category::Initial_Punctuation, _codepoint); }
    inline bool letter_number(char32_t _codepoint) { return contains(General_Category::Letter_Number, _codepoint); }
    inline bool line_separator(char32_t _codepoint) { return contains(General_Category::Line_Separator, _codepoint); }
    inline bool lowercase_letter(char32_t _codepoint) { return contains(General_Category::Lowercase_Letter, _codepoint); }
    inline bool math_symbol(char32_t _codepoint) { return contains(General_Category::Math_Symbol, _codepoint); }
    inline bool modifier_letter(char32_t _codepoint) { return contains(General_Category::Modifier_Letter, _codepoint); }
    inline bool modifier_symbol(char32_t _codepoint) { return contains(General_Category::Modifier_Symbol, _codepoint); }
    inline bool nonspacing_mark(char32_t _codepoint) { return contains(General_Category::Nonspacing_Mark, _codepoint); }
    inline bool open_punctuation(char32_t _codepoint) { return contains(General_Category::Open_Punctuation, _codepoint); }
    inline bool other_letter(char32_t _codepoint) { return contains(General_Category::Other_Letter, _codepoint); }
    inline bool other_number(char32_t _codepoint) { return contains(General_Category::Other_Number, _codepoint); }
    inline bool other_punctuation(char32_t _codepoint) { return contains(General_Category::Other_Punctuation, _codepoint); }
    inline bool other_symbol(char32_t _codepoint) { return contains(General_Category::Other_Symbol, _codepoint); }
    inline bool paragraph_separator(char32_t _codepoint) { return contains(General_Category::Paragraph_Separator, _codepoint); }
    inline bool private_use(char32_t _codepoint) { return contains(General_Category::Private_Use, _codepoint); }
    inline bool space_separator(char32_t _codepoint) { return contains(General_Category::Space_Separator, _codepoint); }
    inline bool spacing_mark(char32_t _codepoint) { return contains(General_Category::Spacing_Mark, _codepoint); }
    inline bool surrogate(char32_t _codepoint) { return contains(General_Category::Surrogate, _codepoint); }
    inline bool titlecase_letter(char32_t _codepoint) { return contains(General_Category::Titlecase_Letter, _codepoint); }
    inline bool unassigned(char32_t _codepoint) { return contains(General_Category::Unassigned, _codepoint); }
    inline bool uppercase_letter(char32_t _codepoint) { return contains(General_Category::Uppercase_Letter, _codepoint); }
}

std::optional<Script> script(char32_t _codepoint) noexcept;

bool script_extensions(char32_t _codepoint, Script const** _result, size_t* _count) noexcept;

enum class Grapheme_Cluster_Break {
    CR,
    Control,
    Extend,
    L,
    LF,
    LV,
    LVT,
    Prepend,
    Regional_Indicator,
    SpacingMark,
    T,
    V,
    ZWJ,
};

namespace grapheme_cluster_break {
    bool cr(char32_t _codepoint) noexcept;
    bool control(char32_t _codepoint) noexcept;
    bool extend(char32_t _codepoint) noexcept;
    bool l(char32_t _codepoint) noexcept;
    bool lf(char32_t _codepoint) noexcept;
    bool lv(char32_t _codepoint) noexcept;
    bool lvt(char32_t _codepoint) noexcept;
    bool prepend(char32_t _codepoint) noexcept;
    bool regional_indicator(char32_t _codepoint) noexcept;
    bool spacingmark(char32_t _codepoint) noexcept;
    bool t(char32_t _codepoint) noexcept;
    bool v(char32_t _codepoint) noexcept;
    bool zwj(char32_t _codepoint) noexcept;
}

enum class EastAsianWidth {
    Ambiguous,
    FullWidth,
    HalfWidth,
    Neutral,
    Narrow,
    Wide,
    Unspecified,
};

inline std::string to_string(EastAsianWidth _value) {
    switch (_value) {
        case EastAsianWidth::Ambiguous: return "Ambiguous";
        case EastAsianWidth::FullWidth: return "FullWidth";
        case EastAsianWidth::HalfWidth: return "HalfWidth";
        case EastAsianWidth::Neutral: return "Neutral";
        case EastAsianWidth::Narrow: return "Narrow";
        case EastAsianWidth::Wide: return "Wide";
        case EastAsianWidth::Unspecified: return "Unspecified";
    }
    return "Unknown";
};

EastAsianWidth east_asian_width(char32_t _codepoint) noexcept;

bool emoji(char32_t _codepoint) noexcept;
bool emoji_component(char32_t _codepoint) noexcept;
bool emoji_modifier(char32_t _codepoint) noexcept;
bool emoji_modifier_base(char32_t _codepoint) noexcept;
bool emoji_presentation(char32_t _codepoint) noexcept;
bool extended_pictographic(char32_t _codepoint) noexcept;

} // end namespace
