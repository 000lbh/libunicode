
# Automatically fetch Unicode database if not present.
if (NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/ucd.cpp) # if c++ files not auto-generated
    if(NOT IS_DIRECTORY ${LIBUNICODE_UCD_DIR})
        if(NOT EXISTS ${LIBUNICODE_UCD_ZIP_FILE})
            file(DOWNLOAD ${LIBUNICODE_UCD_ZIP_DOWNLOAD_URL} ${LIBUNICODE_UCD_ZIP_FILE} SHOW_PROGRESS STATUS LIBUNICODE_UCD_ZIP_DOWNLOAD_STATUS)
        endif()
        file(ARCHIVE_EXTRACT INPUT ${LIBUNICODE_UCD_ZIP_FILE} DESTINATION ${LIBUNICODE_UCD_DIR})
    endif()
endif()

# =========================================================================================================
if(IS_DIRECTORY "${LIBUNICODE_UCD_DIR}")
    find_package(Python3 REQUIRED COMPONENTS Interpreter)
    add_custom_command(
        OUTPUT
            "${CMAKE_CURRENT_SOURCE_DIR}/ucd.cpp"
            "${CMAKE_CURRENT_SOURCE_DIR}/ucd.h"
            "${CMAKE_CURRENT_SOURCE_DIR}/ucd_enums.h"
            "${CMAKE_CURRENT_SOURCE_DIR}/ucd_fmt.h"
            "${CMAKE_CURRENT_SOURCE_DIR}/ucd_ostream.h"
        COMMAND ${Python3_EXECUTABLE} "${CMAKE_CURRENT_SOURCE_DIR}/mktables.py" "${LIBUNICODE_UCD_DIR}"
        DEPENDS mktables.py
        WORKING_DIRECTORY "${CMAKE_BINARY_DIR}"
        COMMENT "Generating UCD API and tables from ${LIBUNICODE_UCD_DIR}"
        VERBATIM
    )
endif()

add_library(unicode_ucd STATIC
    ucd.cpp
    ucd.h
    ucd_enums.h
    ucd_fmt.h
    ucd_ostream.h
)
add_library(unicode::ucd ALIAS unicode_ucd)
target_include_directories(unicode_ucd PUBLIC ${PROJECT_SOURCE_DIR}/src ${CMAKE_SOURCE_DIR}/src)
target_link_libraries(unicode_ucd PUBLIC fmt::fmt-header-only Microsoft.GSL::GSL)

# =========================================================================================================

add_custom_command(
    OUTPUT
        "${CMAKE_CURRENT_SOURCE_DIR}/codepoint_properties_data.cpp"
        "${CMAKE_CURRENT_SOURCE_DIR}/codepoint_properties_data.h"
    COMMAND unicode_tablegen "${LIBUNICODE_UCD_DIR}" "${CMAKE_CURRENT_SOURCE_DIR}/codepoint_properties_data.cpp" "${CMAKE_CURRENT_SOURCE_DIR}/codepoint_properties_data.h" "unicode::precompiled"
    DEPENDS unicode_tablegen unicode::ucd
    WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
    COMMENT "Generating UCD codepoint properties tables from ${LIBUNICODE_UCD_DIR}"
    VERBATIM
)

add_library(unicode_loader STATIC codepoint_properties_loader.h codepoint_properties_loader.cpp)
add_library(unicode::loader ALIAS unicode_loader)
target_include_directories(unicode_loader PUBLIC ${PROJECT_SOURCE_DIR}/src ${CMAKE_SOURCE_DIR}/src)
target_link_libraries(unicode_loader PUBLIC fmt::fmt-header-only Microsoft.GSL::GSL unicode::ucd)

# =========================================================================================================

add_library(unicode STATIC
    capi.cpp
    codepoint_properties.cpp
    emoji_segmenter.cpp
    grapheme_segmenter.cpp
    scan.cpp
    script_segmenter.cpp
    width.cpp

    # auto-generated by unicode_tablgen
    codepoint_properties_data.h codepoint_properties_data.cpp
)

set(public_headers
    capi.h
    codepoint_properties.h
    convert.h
    emoji_segmenter.h
    grapheme_segmenter.h
    run_segmenter.h
    scan.h
    script_segmenter.h
    utf8.h
    utf8_grapheme_segmenter.h
    width.h
    word_segmenter.h
)

set_target_properties(unicode PROPERTIES PUBLIC_HEADER "${public_headers}")

add_library(unicode::core ALIAS unicode)
target_include_directories(unicode PUBLIC ${PROJECT_SOURCE_DIR}/src ${CMAKE_SOURCE_DIR}/src)
target_link_libraries(unicode PUBLIC unicode::ucd fmt::fmt-header-only Microsoft.GSL::GSL)

install(TARGETS unicode
        LIBRARY DESTINATION lib
        PUBLIC_HEADER DESTINATION include/unicode)

add_executable(unicode_tablegen tablegen.cpp)
target_include_directories(unicode_tablegen PRIVATE ${PROJECT_SOURCE_DIR}/src ${CMAKE_SOURCE_DIR}/src)
target_link_libraries(unicode_tablegen PRIVATE unicode::loader fmt::fmt-header-only Microsoft.GSL::GSL)

# --------------------------------------------------------------------------------------------------------
# unicode_test
if(LIBUNICODE_TESTING)
    enable_testing()
    add_executable(unicode_test
        capi_test.cpp
        convert_test.cpp
        emoji_segmenter_test.cpp
        grapheme_segmenter_test.cpp
        run_segmenter_test.cpp
        scan_test.cpp
        script_segmenter_test.cpp
        test_main.cpp
        unicode_test.cpp
        utf8_grapheme_segmenter_test.cpp
        utf8_test.cpp
        width_test.cpp
        word_segmenter_test.cpp
    )
    target_link_libraries(unicode_test unicode Catch2::Catch2)
    add_test(unicode_test unicode_test)
endif()
